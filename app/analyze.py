import logging

logger = logging.getLogger(__name__)

def generate_actionable_insights(ecom_data=None, salesdrive_data=None, clarity_data=None):
    """
    Generate actionable insights based on ecommerce, SalesDrive, and Clarity data.
    Returns insights text and recommendations text.
    """
    try:
        logger.info("Generating actionable insights")
        
        insights = []
        recommendations = []
        
        # Analyze ecommerce data
        if ecom_data:
            logger.debug("Processing ecommerce data for insights")
            insights.append("üìä –ê–Ω–∞–ª—ñ–∑ E-commerce:")
            
            # Add basic insights based on available data
            if isinstance(ecom_data, dict):
                if 'real_sales_count' in ecom_data:
                    insights.append(f"- –†–µ–∞–ª—å–Ω–∏—Ö –ø—Ä–æ–¥–∞–∂—ñ–≤: {ecom_data.get('real_sales_count', 0)}")
                if 'real_sales_amount' in ecom_data:
                    insights.append(f"- –°—É–º–∞ –ø—Ä–æ–¥–∞–∂—ñ–≤: {ecom_data.get('real_sales_amount', 0):.2f} UAH")
                if 'net_profit' in ecom_data:
                    insights.append(f"- –ß–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: {ecom_data.get('net_profit', 0):.2f} UAH")
        
        # Analyze SalesDrive data
        if salesdrive_data:
            logger.debug("Processing SalesDrive data for insights")
            insights.append("\nüìû –ê–Ω–∞–ª—ñ–∑ SalesDrive:")
            
            if isinstance(salesdrive_data, dict):
                if 'total_orders' in salesdrive_data:
                    insights.append(f"- –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å: {salesdrive_data.get('total_orders', 0)}")
                if 'real_orders' in salesdrive_data:
                    insights.append(f"- –í–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å: {salesdrive_data.get('real_orders', 0)}")
                if 'pending_orders' in salesdrive_data:
                    insights.append(f"- –ó–∞–º–æ–≤–ª–µ–Ω—å –≤ –æ–±—Ä–æ–±—Ü—ñ: {salesdrive_data.get('pending_orders', 0)}")
        
        # Analyze Clarity data
        if clarity_data:
            logger.debug("Processing Clarity data for insights")
            insights.append("\nüîç –ê–Ω–∞–ª—ñ–∑ Clarity:")
            
            if isinstance(clarity_data, dict):
                if 'traffic' in clarity_data and clarity_data['traffic']:
                    insights.append("- –î–∞–Ω—ñ –ø—Ä–æ —Ç—Ä–∞—Ñ—ñ–∫ –æ—Ç—Ä–∏–º–∞–Ω–æ")
                if 'clicks' in clarity_data and clarity_data['clicks']:
                    insights.append("- –î–∞–Ω—ñ –ø—Ä–æ –∫–ª—ñ–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ")
                if 'scrolls' in clarity_data and clarity_data['scrolls']:
                    insights.append("- –î–∞–Ω—ñ –ø—Ä–æ –ø—Ä–æ–∫—Ä—É—Ç–∫—É –æ—Ç—Ä–∏–º–∞–Ω–æ")
        
        # Generate recommendations
        recommendations.append("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
        recommendations.append("- –†–µ–≥—É–ª—è—Ä–Ω–æ –≤—ñ–¥—Å—Ç–µ–∂—É–π—Ç–µ –∫–ª—é—á–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏")
        recommendations.append("- –ê–Ω–∞–ª—ñ–∑—É–π—Ç–µ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∫–∞–º–ø–∞–Ω—ñ–π")
        recommendations.append("- –û–ø—Ç–∏–º—ñ–∑—É–π—Ç–µ –∫–æ–Ω–≤–µ—Ä—Å—ñ—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞–Ω–∏—Ö Clarity")
        
        insights_text = "\n".join(insights) if insights else "–î–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ"
        recommendations_text = "\n".join(recommendations)
        
        logger.info("Actionable insights generated successfully")
        return insights_text, recommendations_text
        
    except Exception as e:
        logger.error(f"Error generating insights: {e}")
        logger.exception("Insights generation error details")
        return "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —ñ–Ω—Å–∞–π—Ç—ñ–≤", "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"